plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'com.diffplug.spotless' version '7.0.0.BETA1'
}

group = 'org.example'
version = '0.2.0'

java {
    sourceCompatibility = '17'
}

spotless {
    java {
        eclipse().configFile('eclipse-formatting-rules.xml')
        target 'src/**/*.java'
        importOrder()
        removeUnusedImports()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "GitHubPackagesClassRedisStreams"
        url = uri("https://maven.pkg.github.com/austral-ingsis/class-redis-streams")
        credentials {
            username = project.findProperty("GH_USER") ?: System.getenv("USERNAME")
            password = project.findProperty("GH_PAT") ?: System.getenv("TOKEN")
        }
    }

    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/TPs-Ingenieria-de-Sistemas/redis-events")
        credentials {
            username = project.findProperty("GH_USER") ?: System.getenv("USERNAME")
            password = project.findProperty("GH_PAT") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // redis-events
    implementation 'com.example:redis-events:0.1.2-SNAPSHOT'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.6'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

test {
    useJUnitPlatform()
}

tasks.register("installGitHooks", Copy) {
    from new File(rootProject.rootDir, "hook/pre-commit")
    into { new File(rootProject.rootDir, ".git/hooks") }
}

tasks.named("build") {
    dependsOn("installGitHooks")
}
kotlin {
    jvmToolchain(17)
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

tasks.named('check') {
    dependsOn 'jacocoTestCoverageVerification'
}

tasks.named('check') {
    dependsOn 'spotlessCheck'
}

// Check Lint: ./gradlew spotlessCheck
// Format code: ./gradlew spotlessApply
